# 1. DBMS 아키텍처개요


### 쿼리평가 엔진
- 입력받은 sql구문을 분석하고 기억장치데이터에 어떻게 접근할지 계획을세우고 실행하는 DBMS의 핵심기능 담당 모듈

- 성능과 관련이 깊은 모듈


#### 버퍼매니저

DBMS는 버퍼라는 메모리영역을 확보해두는데 이 메모리영역을 관리하는 것이 버퍼매니저이다.

#### 디스크 용량 매니저 
가장많은 데이터를 다루는 소프트웨어
어디에 어떻게 데이터를 저장할지 관리, 데이터의 읽고 쓰기를 제어한다. 


#### 트랜잭션 매니저와 락매니저

- 트랜잭션의 정합성을 유지하면서 실행시키고 필요한경우 데이터에 락을걸어 다른사람의 요청을 대기시키는것

- 하나의 SQL구문을 처리하기보다는 여러 SQL구문을 동시에 실행할때 성능과 관련있는 메커니즘 



### 리커버리 매니저

장애를 대비해 정기적으로 백업하고 문제가일어났을때 복구해주는 기능을 수행하는곳 


# 2. DBMS와 버퍼

많은데이터를 영속적으로 얻기위해선 속도를 잃고
속도를 얻고자한다면 많은데이터를 영속적으로 저장하기 힘들다는 트레이드오프는 항상 생긴다. 

### 첫번째 트레이드오프(기억비용, 접근속도)

#### 하드디스크

DBMS가 데이터를 저장하는매체는 대부분 하드디스크다


#### 메모리
데이터접근속도는 하드디스크에 비해 빠르지만 많은양의 메모리를 저장할수는없다. 

### 버퍼를활용한 속도향상

> 자주접근하는 데이터는 메모리위에 올려두면 데이터를 디스크에서 가져올필요없이 바로읽어 빠르게 데이터를 검색할수있다.
ex) 메모리에 데이터가있을경우 디스크까지 접근하지않고 가져오기만하면 된다.
메모리에 데이터가 없을경우 디스크까지 접근해야한다.

일반적인 SQL구문의 실행시간을 대부분을 저장소I/O에 사용하기때문에
**디스크 접근을 줄이는것이 성능향상의 큰 지름길이다.
**






### DBMS가 데이터 유지를 위해 사용하는메모리

- 데이터캐시
-> Select구문같은걸 실행했을때 선택하고싶은데이터가 데이터캐시에있다면 디스크에 접근하지않고 처리가 수행됨 

- 로그버퍼
-> 갱신처리(INSERT, DELETE, UPDATE, MERGE) 와 관련있음
갱신관련 SQL을 받으면, 곧바로 저장소에있는걸 변경하는게 아니라 로그버퍼에 변경정보를 보내고 이후에 디스크에 변경이 수행된다.
(성능을 높이기 위해서다)

> DBMS의 핵심은 저장소의 속도를 어떻게 줄일것인가

### 버퍼와 캐시

공통점 
- 추가적인 메모리를 소모함으로써 속도 차이를 보상함

차이점
- 버퍼는 사용후에 데이터를 폐기하고, 캐시는 한번저장한것은 저장해두고 접근요청이 발생할때마다 반환할수있다. 

### 두번째 트레이드오프 ( 데이터정합성, 성능)

메모리의 단점
- 비싸다
- 용량이 적다
- **휘발성**
-> 장애로 서버가 죽으면 모든데이터가 날아간다. 
=> 데이터의 부정합이 발생한다


데이터캐시가 삭제되어도 디스크에서 시간이 걸리더라도 한번더 읽기만하면되지만,
로그버퍼위에서 디스크에 반영되기전 로그파일에 장애가발생해서 사라진다면 , 해당데이터가 완전 사라져 복구가 힘들다.

> 그럴일들을 대비해 DBMS는 커밋시점에  반드시 갱신정보를 로그파일에 쓴다.
데이터의 정합성을 유지하기위해서이다. 
그러나, 커밋때마다 디스크에 접근이 발생하기때문에 지연이 발생할 가능성이 생긴다.




### 세번째 트레이드오프 (검색,갱신)

갱신보다는 검색처리의 대상레코드가 훨씬많기때문에, 자주검색하는 데이터를 캐시에 올려놓는것이 좋다 

> 로그버퍼를 크게 잡는다 = 갱신처리에서 부하가 큰 걸릴것을 고려한 설계(검색에 비해 갱신이 많다)
데이터캐시를 크게잡는다 = 검색관련 처리가 중심이다.(일반적인경우)

#### 워킹메모리

- 정렬 또는 해시가 필요한때 사용되는 영역
- 종료되면 해제되는 임시영역
- 데이터캐시, 로그버퍼와는 다른영역 

### 운영체제에서의  스왑(swap)

![](https://media.vlpt.us/images/dudwls0505/post/13c3ebc8-03b3-4fb4-9d1d-98a1df89da2f/image.png)

출처 : https://jhnyang.tistory.com/103

예를들어서 userspace라는공간에 최대 10개의 프로세스를 올릴수있다고 하고 다 차지된상태라고치자.

이때 11번째 프로세스가 실행되면 꽉차서 올리지못한다
그래서 10개중 어떤프로세스를 잠깐 내리고 그사이에 11번쨰 프로세스를 실행시키는걸 생각합니다.

그런데 11번째 프로세스가 기다리는시간이 1시간이 넘고, 쭉 앞으로 기다릴확률이 높다고 판단되면,  쫓아내고 그공간에 새로운 프로세스를 집어넣는다.

쫓아낼때 버리면안되기에 그메모리내용을 하드디스크나 SSD같은 secondary storage에 저장을하고 수행하는데 이렇게 프로세스단위로 쫓아내는것을 swap out한다고 한다.

쫓아낸 프로세스 이벤트요청이 오면 쫓아낸 프로세스를 다시 메모리에 올려 수행하는것을 swap in 이라고하고 swap in,out하는과정을 swapping이라고 한다. 
secondary 저장소에 있떤것을 메모리에 다시 로딩해야해서 조금느릴순있지만, 부족한 메모리에 더많은 프로세스를 실행할수있다는 장점이있다.



> secondary 저장소에 있떤것을 메모리에 다시 로딩해야해서 조금느릴순있지만, 부족한 메모리에 더많은 프로세스를 실행할수있다는 장점이있다.





**느려지는 상황이 발생해도 어떻게든 끝까지 처리하려고 노력한다는게 DBMS와 자바와의 차이점**

## DBMS와 실행계획


![](https://media.vlpt.us/images/dudwls0505/post/791aa3e4-392c-4122-9569-7570fb0ebd5d/image.png)

쿼리평가엔진이 입력받은 SQL구문을 처음 읽어들이는 모듈이다.

**파서**
구문적으로 오류가없는지 분석을 해주고
SQL구문을 정형적인 형식으로 변환해준다

**옵티마이저**
파서를 통과한 쿼리는 옵티마이저로 전송되고 옵티마이저가** DBMS의 핵심**이다.
인덱스,데이터분산OR편향, DBMS내부 매개변수등의 조건을 고려해서 실행계획을 작성하고, 비용 평가하고 ,  비용이 가장낮은 실행계획을 선택한다. 

**카탈로그매니저**
옵티마이저가 실행계획을 세울때 중요한 정보를 제공하는게 카탈로그 매니저다.
테이블또는 인덱스의 통계정보가 저장되어있다. 

**플랜평가**
최적의 실행결과를 선택함 


옵티마이저는 항상 최적의 플랜을 선택하진 못한다.
카탈로그 정보가 테이블또는 인덱스의 실제와** 일치하지않을때 실패**한다.
테이블에 데이터의 변경이 일어났을때 카탈로그 정보가 갱신되지않는경우다.
=> 갱신시점을 확실하게 검토해야한다.


### 실행 계획이 SQL구문의성능을 결정한다

SQL구문들이 어떠한 접근경로로 데이터를 검색하는지 
어떤 테이블 설정이 효율적인지등을 고려해야한다. 
